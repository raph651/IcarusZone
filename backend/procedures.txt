## 1. pgadmin doesn't have table corresponding to the APP :
might be that I manually deleted all the migrations files, neede to create new migrations instead
```bash
python manage.py makemigrations APPNAME
python manage.py migrate --fake APPNAME zero
python manage.py migrate APPNAME

done ☺♥
```

## 2. postgresql server down

```bash
sudo service postgresql status 
sudo service postgresql start
sudo -i -u USERNAME

\du --check username, superusers...
SELECT * from CURRENT_USER;
SELECT rolname, rolpassword from pg_authid;
ALTER ROLE USERNAME with password 'PASSWORD'

\l --to see list of database
```

##3. django database config:

# local postgresql setting
DB_NAME = 'localDB'
DB_USERNAME = 'postgres'
DB_PASSWORD = 'Raph.651'
DB_HOSTNAME = 'localhost'
PORT_NUMBER= 5432

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': DB_NAME,
        'USER': DB_USERNAME,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOSTNAME,
        'PORT': PORT_NUMBER,
    }
}

# original setting
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

## 4. locally deleted postresql DB that is hosted on AWS:

# add db-migrate.config to .ebextensions
container_commands:
  01_migrate:
    command: "source /var/app/venv/*/bin/activate && python manage.py makemigrations APPNAME \
    && python manage.py migrate --fake APPNAME zero && python3 manage.py migrate APPNAME"
    leader_only: true
option_settings:
  aws:elasticbeanstalk:application:environment:
    DJANGO_SETTINGS_MODULE: APPNAME.settings

## 5. upload file size exceed maximum, need to config nginx on platform site

# add file to .platform/nginx/conf.d/proxy.conf
#with this line

client_max_body_size 50M;

## 6. Postman problems: 

* A. Postman doesn't conect to local server
* B. Postman can't read files
* C. Inputs can't be plain/text
* D. Authentication: bearer token

A:  simply download PostMan Agent on windows
B:  change the folder name, "C://USERS/<USERNAME>/Postman Agent" to "C://USERS/<USERNAME>/Postman"
C:  dropdown menu change to JSON
D:  bearer token acquired through api/token/, use the api access token to authenticate, use the refresh token to generate new

## 7. Deploy the Django application to Elastic Beanstalk. See this for more info https://testdriven.io/blog/django-elastic-beanstalk. 


## 8. After adding the AWS CloudFront, need to add this cloudfront address and S3 bucket address to CORS_ALLOWED_ORIGINS!

Again, when fetch apis from the frontend website. It shows error that the request method should be made over HTTPS. 

To solve, configure the elasticbeanstalk environment's Load Balancer. Add a listener with port 443 over HTTPS. Need to also add a SSL certificate. Important thing to note is that, the default elasticbeanstalk environment address which is quite long, is not eligible for a SSL certificate. To circumvent that, use something like `api.icaruszone.com` as the fully qualified domain name. Then add this FQDN as CNAME in your DNS provider. Then add the SSL certificate CNAME too.

The Django settings should have `api.icaruszone.com` in allowed host. Also modify the Frontend Fectch url to this `https://api.icaruszone.com/`.


## 9. After eb ssh, cannot find environment variables.

--> run
 ```export $(sudo cat /opt/elasticbeanstalk/deployment/env | xargs) ```
